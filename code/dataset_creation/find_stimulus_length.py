import pandas as pd

def get_start_and_end(song_id, condition_id, participant_id):

    cue_length_df = pd.read_csv("cues.csv", sep=";", header=0,
        index_col = "song_id", names=['song_id', 'version1', 'version2'])
    

    full_df = pd.read_csv("songs_and_cues.csv", sep=";", header=0,
                        index_col = "song_id", names=['song_id', 
                                    'cue_version1', 'cue_version2', 
                                    'length_version1', 'length_version2'])

    shortest = 6.8709
    #shortest = 6.859375 #trying this bc this is the shortest when i run the other script

    """if condition_id in [3,4]: #no cue conditions
        tmin = 0
        tmax = shortest #crop everything to the shortest stimulus length

    else: #conditions 1,2 are with cue elif condition_id in [1,2]
        if song_id in [3, 4, 13, 14, 23, 24]: # These songs exist in both versions
            cue_len = cue_length_df.loc[song_id, "version1"]
        else: # All other songs, we need to differentiate based on participant_id
            if participant_id in ['P01', 'P04', 'P05', 'P06', 'P07']:
                cue_len = cue_length_df.loc[song_id, "version1"]
            else: # participant_id in ['P09', 'P11', 'P12', 'P13', 'P14']
                cue_len = cue_length_df.loc[song_id, "version2"]

        tmin = cue_len
        tmax = shortest + cue_len"""

    if participant_id in ['P01', 'P04', 'P05', 'P06', 'P07']:
        if condition_id in [3,4]:
            tmin = 0
            tmax = full_df.loc[song_id, "length_version1"]
        else: #condition 1,2 with cues
            tmin = full_df.loc[song_id, "cue_version1"]
            tmax = full_df.loc[song_id, "cue_version1"] + full_df.loc[song_id, "length_version1"]
    else: #rest of participants version 2
        if condition_id in [3,4]:
            tmin = 0
            tmax = full_df.loc[song_id, "length_version2"]
        else: #condition 1,2 with cues
            tmin = full_df.loc[song_id, "cue_version2"]
            tmax = full_df.loc[song_id, "cue_version2"] + full_df.loc[song_id, "length_version2"]
    
    return (tmin, tmax)

    #lookup_table = {}

    #return lookup_table






if __name__ == "__main__":
    lookup_table = {}
    for participant_id in ['P01', 'P04', 'P05', 'P06', 'P07', 'P09', 'P11', 'P12', 'P13', 'P14']:
        for song_id in [1,2,3,4,11,12,13,14,21,22,23,24]:
            for condition_id in range(1,5):
                print(song_id, condition_id, participant_id, get_start_and_end(song_id, condition_id, participant_id))


"""data = [
    (1, 1, 'P01', (1.65, 8.5209)),
    (1, 2, 'P01', (1.65, 8.5209)),
    (1, 3, 'P01', (0, 6.8709)),
    (1, 4, 'P01', (0, 6.8709)),
    (2, 1, 'P01', (1.867, 8.7379)),
    (2, 2, 'P01', (1.867, 8.7379)),
    (2, 3, 'P01', (0, 6.8709)),
    (2, 4, 'P01', (0, 6.8709)),
    (3, 1, 'P01', (2.317, 9.1879)),
    (3, 2, 'P01', (2.317, 9.1879)),
    (3, 3, 'P01', (0, 6.8709)),
    (3, 4, 'P01', (0, 6.8709)),
    (4, 1, 'P01', (2.988, 9.8589)),
    (4, 2, 'P01', (2.988, 9.8589)),
    (4, 3, 'P01', (0, 6.8709)),
    (4, 4, 'P01', (0, 6.8709)),
    (5, 1, 'P01', (1.669, 8.5399)),
    (5, 2, 'P01', (1.669, 8.5399)),
    (5, 3, 'P01', (0, 6.8709)),
    (5, 4, 'P01', (0, 6.8709)),
    (6, 1, 'P01', (1.9, 8.7709)),
    (6, 2, 'P01', (1.9, 8.7709)),
    (6, 3, 'P01', (0, 6.8709)),
    (6, 4, 'P01', (0, 6.8709)),
    (7, 1, 'P01', (2.364, 9.2349)),
    (7, 2, 'P01', (2.364, 9.2349)),
    (7, 3, 'P01', (0, 6.8709)),
    (7, 4, 'P01', (0, 6.8709)),
    (8, 1, 'P01', (2.975, 9.8459)),
    (8, 2, 'P01', (2.975, 9.8459)),
    (8, 3, 'P01', (0, 6.8709)),
    (8, 4, 'P01', (0, 6.8709)),
    (9, 1, 'P01', (1.995, 8.8659)),
    (9, 2, 'P01', (1.995, 8.8659)),
    (9, 3, 'P01', (0, 6.8709)),
    (9, 4, 'P01', (0, 6.8709)),
    (10, 1, 'P01', (2.046, 8.9169)),
    (10, 2, 'P01', (2.046, 8.9169)),
    (10, 3, 'P01', (0, 6.8709)),
    (10, 4, 'P01', (0, 6.8709)),
    (11, 1, 'P01', (2.307, 9.1779)),
    (11, 2, 'P01', (2.307, 9.1779)),
    (11, 3, 'P01', (0, 6.8709)),
    (11, 4, 'P01', (0, 6.8709)),
    (12, 1, 'P01', (3.365, 10.2359)),
    (12, 2, 'P01', (3.365, 10.2359)),
    (12, 3, 'P01', (0, 6.8709)),
    (12, 4, 'P01', (0, 6.8709)),
    (11, 3, 'P01', (0, 6.8709)),
    (11, 4, 'P01', (0, 6.8709)),
    (12, 1, 'P01', (3.365, 10.2359)),
    (12, 2, 'P01', (3.365, 10.2359)),
    (12, 3, 'P01', (0, 6.8709)),
    (12, 4, 'P01', (0, 6.8709)),
    (1, 1, 'P04', (1.65, 8.5209)),
    (1, 2, 'P04', (1.65, 8.5209)),
    (1, 3, 'P04', (0, 6.8709)),
    (1, 4, 'P04', (0, 6.8709)),
    (2, 1, 'P04', (1.867, 8.7379)),
    (2, 2, 'P04', (1.867, 8.7379)),
    (2, 3, 'P04', (0, 6.8709)),
    (2, 4, 'P04', (0, 6.8709)),
    (3, 1, 'P04', (2.317, 9.187899999999999)),
    (3, 2, 'P04', (2.317, 9.187899999999999)),
    (3, 3, 'P04', (0, 6.8709)),
    (3, 4, 'P04', (0, 6.8709)),
    (4, 1, 'P04', (2.988, 9.8589)),
    (4, 2, 'P04', (2.988, 9.8589)),
    (4, 3, 'P04', (0, 6.8709)),
    (4, 4, 'P04', (0, 6.8709)),
    (5, 1, 'P04', (1.669, 8.5399)),
    (5, 2, 'P04', (1.669, 8.5399)),
    (5, 3, 'P04', (0, 6.8709)),
    (5, 4, 'P04', (0, 6.8709)),
    (6, 1, 'P04', (1.9, 8.7709)),
    (6, 2, 'P04', (1.9, 8.7709)),
    (6, 3, 'P04', (0, 6.8709)),
    (6, 4, 'P04', (0, 6.8709)),
    (7, 1, 'P04', (2.364, 9.2349)),
    (7, 2, 'P04', (2.364, 9.2349)),
    (7, 3, 'P04', (0, 6.8709)),
    (7, 4, 'P04', (0, 6.8709)),
    (8, 1, 'P04', (2.975, 9.8459)),
    (8, 2, 'P04', (2.975, 9.8459)),
    (8, 3, 'P04', (0, 6.8709)),
    (8, 4, 'P04', (0, 6.8709)),
    (9, 1, 'P04', (1.995, 8.8659)),
    (9, 2, 'P04', (1.995, 8.8659)),
    (9, 3, 'P04', (0, 6.8709)),
    (9, 4, 'P04', (0, 6.8709)),
    (10, 1, 'P04', (2.046, 8.9169)),
    (10, 2, 'P04', (2.046, 8.9169)),
    (10, 3, 'P04', (0, 6.8709)),
    (10, 4, 'P04', (0, 6.8709)),
    (11, 1, 'P04', (2.307, 9.1779)),
    (11, 2, 'P04', (2.307, 9.1779)),
    (11, 3, 'P04', (0, 6.8709)),
    (11, 4, 'P04', (0, 6.8709)),
    (12, 1, 'P04', (3.365, 10.2359)),
    (12, 2, 'P04', (3.365, 10.2359)),
    (12, 3, 'P04', (0, 6.8709)),
    (12, 4, 'P04', (0, 6.8709)),
    (1, 1, 'P05', (1.65, 8.5209)),
    (1, 2, 'P05', (1.65, 8.5209)),
    (1, 3, 'P05', (0, 6.8709)),
    (1, 4, 'P05', (0, 6.8709)),
    (2, 1, 'P05', (1.867, 8.7379)),
    (2, 2, 'P05', (1.867, 8.7379)),
    (2, 3, 'P05', (0, 6.8709)),
    (2, 4, 'P05', (0, 6.8709)),
    (3, 1, 'P05', (2.317, 9.187899999999999)),
    (3, 2, 'P05', (2.317, 9.187899999999999)),
    (3, 3, 'P05', (0, 6.8709)),
    (3, 4, 'P05', (0, 6.8709)),
    (4, 1, 'P05', (2.988, 9.8589)),
    (4, 2, 'P05', (2.988, 9.8589)),
    (4, 3, 'P05', (0, 6.8709)),
    (4, 4, 'P05', (0, 6.8709)),
"""